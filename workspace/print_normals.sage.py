
# This file was *autogenerated* from the file print_normals.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
from sage.geometry.polyhedron.parent import Polyhedra


square_from_vertices = Polyhedron(vertices = [[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ], [_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ],[_sage_const_1 ,-_sage_const_1 ,_sage_const_1 ],[_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ],[-_sage_const_1 ,_sage_const_1 ,_sage_const_1 ],[-_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ],[-_sage_const_1 ,-_sage_const_1 ,_sage_const_1 ],[-_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ]])


#for f in square_from_vertices.faces(2):
#  print f.ambient_Hrepresentation()[0]._A
visible_faces = []

def visible_graph(polyhedron, projection_vector):
    for f in polyhedron.faces(_sage_const_2 ):
        if projection_vector.dot_product(f.ambient_Hrepresentation()[_sage_const_0 ]._A) > _sage_const_0 :
            visible_faces.append(f)
            print projection_vector.dot_product(f.ambient_Hrepresentation()[_sage_const_0 ]._A).__class__
            print f
    print visible_faces
    return visible_faces



proj_vector = vector(AA, [_sage_const_1 ,_sage_const_1 ,_sage_const_1 /_sage_const_2 ])

visible_faces = visible_graph(square_from_vertices, proj_vector)

